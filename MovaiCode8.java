import java.util.*;

public class MovaiCode8{

    public static <E> E[] mange_une_crepe(E[] pile_de_crepes) throws Exception {


        /***=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=***/
        // les classes de la fonction

        /***
         *  Nos fameuse Crepes Exceptionnelles
         */
        class CrepeExeptionnelle extends Exception {
            public final E crepe_ratee = null; //c'Ã©tait pour optimiser et faire un truc propre/sympas mais comme c'est une inner class dans une fonction static avec un type paramÃ©trÃ© bah c'Ã©tait pas possible, mais j'ai laissÃ© parce que c'est moche et on aime quand c'est moche ici

            /***
             *  La fameuse crÃªpe d'Exception qu'on pourra rÃ©cupÃ©rÃ© aprÃ¨s avoir throw une CrepeExceptionnelle
             */
            public final E crepe;

            public CrepeExeptionnelle() {//le constructeur par dÃ©faut -> dans le cas d'un plantage avec une crepe ratÃ©
                super();
                crepe = crepe_ratee;
            }

            public CrepeExeptionnelle(E crepeExceptionnelle) {//le constructeur pour les crÃªpes exceptionnelle
                super();
                this.crepe = crepeExceptionnelle;//le this juste pour la lisibilitÃ©, trop de crÃªpe tue les crÃªpes (non c'est faux on en mange mÃªme quand ya plus la place.. je vous ai vu ğŸ‘€)
            }
        }

        /***
         *  notre fameux itÃ©rateur d'Exception
         */
        class Iterateur {
            final E[] pile_de_crepe;//nos fameuses crÃªpes
            final int nombre_de_crepe;//pour se rappeler du nombre de crÃªpe au dÃ©but au cas oÃ¹ un gourmant passerait par lÃ ..
            int index = -1;//notre avancÃ© dans les crÃªpes de la pile

            public Iterateur(E[] pile_de_crepe) {
                this.pile_de_crepe = pile_de_crepe.clone();//on copie la pile de crÃªpe dans l'itÃ©rateur au cas oÃ¹ il se permettrait un petit croc le gourmand..
                this.nombre_de_crepe = pile_de_crepe.length;//comme dit plus, on note dans un coin de la tÃªte le nombre de crÃªpe au cas oÃ¹ une souris passerai par lÃ 
            }

            /***
             *  nous permet de savoir si la crÃªpe actuelle a une crÃªpe au dessus
             */
            public void aUnSuivant() throws CrepeExeptionnelle {
                if (index >= nombre_de_crepe - 1)
                    throw new CrepeExeptionnelle();//Ã§a throw une crepe ratÃ© si jamais il y en a plus, sinon tout va bien
            }

            /***
             *  Ã§a nous donne la crÃªpe suivante et on avance donc d'une crepe dans la pile
             */
            public void suivant() throws CrepeExeptionnelle {
                aUnSuivant();//on vÃ©rifie bien qu'il y a une suivante avant de la manger
                throw new CrepeExeptionnelle(pile_de_crepe[++index]);//this Ã§a n'a pas throw la ligne d'avant alors on peut prendre la crÃªpe d'Exception suivante
            }
        }


        /***=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=***/
        // le corp de la fonction

        Stack<E> stack = null;
        try {//un try parce qu'ici on fait avec des CrepesExceptionnelles
            stack = new Stack<>();
            E crepe = null;//la crepe prÃ©cÃ©dente que l'on ajoutera Ã  notre pile (null car il y a pas de prÃ©cÃ©dent pour l'instant, Ã§a permettra de ne pas ajouter la derniÃ¨re crÃªpe qui sera mangÃ©)
            Iterateur iterateur = new Iterateur(pile_de_crepes); //on crÃ©er notre itÃ©rateur

            //ici Ã§a devient sÃ©rieux
            while (true) {//ici on n'en sort qu'Exceptionnellement (via le catch de l'Exception qui sera retournÃ© par aUnSuivant();
                iterateur.aUnSuivant();//laisse passÃ© s'il y a une crÃªpe suivante sinon on sort
                try {
                    iterateur.suivant();
                }//va chercher la crÃªpe suivante
                catch (CrepeExeptionnelle crepeExeptionnelle) {//rÃ©cupÃ¨re la crÃªpe suivante
                    if (crepeExeptionnelle.crepe == null)//vÃ©rifie qu'il ne s'agit pas d'une mauvaise crÃªpe
                        throw new NoSuchElementException();//s'il s'agit d'une mauvaise crÃªpe c'est qu'il y en a plus, donc on throw l'erreur qui correspond
                    if (crepe != null)//si ya une crepe prÃ©cÃ©dente
                        stack.add(crepe);//on l'ajoute alors Ã  la pile
                    crepe = crepeExeptionnelle.crepe;//la crepe prÃ©cÃ©dente passe Ã  la suivante
                }
            }
        } catch (CrepeExeptionnelle crepeExeptionnelle) {//ici c'est pour sortir du while(true); grÃ¢ce Ã  l'Exception aUnSuivant();

        }

        pile_de_crepes = stack.toArray(pile_de_crepes);//on met notre nouvelle pile de crepe Ã  la place de l'ancienne (il s'agit du mÃªme tableau, de la mÃªme faÃ§on qu'on garderait la pile dans la mÃªme assiette aprÃ¨s en avoir mangÃ© une)
        return pile_de_crepes;//on renvoie la pile mÃªme si ce n'est pas nÃ©cessaire car le tableau est directement modifiÃ© (Ã§a plait toujours Ã  certains..)
    }

    public static void main(String[] args) throws Exception {
        //ici j'ai mis des Integer mais par dÃ©finition vous pouvez mettre n'importe quel type de crÃªpes, des Strings, des Boolean, des CrepesALaFraise, CrepesAuNutella voir mÃªme encore des CrepesExceptionnelle  mais lÃ  Ã§a devient l'Inception des Exceptions.. une autre fois peut-Ãªtre (dans les faits c'est pas possible puisqu'il s'agit d'une inner class de la fonction, mais Ã©crite dans un fichier Ã  part Ã§a marcherait tout bien)
        String[] array = new String[]{"Sucre citron","banane chocolat et chantilly","confiture abricot","crÃ¨me de maron et chantilly"};
        System.out.println(array);
        //array = {0,1,2,3}

        String[] array2 = mange_une_crepe(array);//(array2==array), on rÃ©utilise la mÃªme assiette, gare Ã  la vaisselle
        System.out.println(array2);
        //array2 = {0,1,2}
    }
}
